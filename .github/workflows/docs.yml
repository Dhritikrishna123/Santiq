name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths: [ 'docs/**', 'README.md' ]
  pull_request:
    branches: [ main ]
    paths: [ 'docs/**', 'README.md' ]
  workflow_dispatch:

jobs:
  # Validate documentation
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install markdown-link-check
    
    - name: Check documentation structure
      run: |
        # Verify all documentation files exist
        test -f README.md
        test -f docs/README.md
        test -f docs/getting-started.md
        test -f docs/user-guide.md
        test -f docs/configuration.md
        test -f docs/cli-reference.md
        test -f docs/plugin-development.md
        test -f docs/api-reference.md
        test -f docs/installation.md
        test -f docs/monitoring.md
        echo "✓ All documentation files present"
    
    - name: Validate markdown links
      run: |
        # Check main README
        markdown-link-check README.md || echo "Link check failed for README.md"
        
        # Check docs README
        markdown-link-check docs/README.md || echo "Link check failed for docs/README.md"
        
        echo "✓ Documentation link validation completed"
    
    - name: Validate YAML examples
      run: |
        # Validate example configuration files
        python -c "
        import yaml
        yaml.safe_load(open('examples/basic_pipeline.yml'))
        yaml.safe_load(open('examples/external_plugins_example.yml'))
        print('✓ Example YAML files are valid')
        "
    
    - name: Check CLI documentation accuracy
      run: |
        # Verify CLI commands mentioned in docs actually exist
        python -m santiq.cli.main --help > /dev/null
        python -m santiq.cli.main plugin list > /dev/null
        python -m santiq.cli.main run --help > /dev/null
        echo "✓ CLI commands documented correctly"

  # Build documentation (if using a static site generator)
  build:
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
    
    - name: Create mkdocs config (if needed)
      run: |
        cat > mkdocs.yml << 'EOF'
        site_name: Santiq Documentation
        site_description: Comprehensive documentation for Santiq ETL platform
        site_author: Santiq Team
        
        theme:
          name: material
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.expand
            - search.highlight
            - search.share
        
        nav:
          - Home: README.md
          - Getting Started: docs/getting-started.md
          - User Guide: docs/user-guide.md
          - Configuration: docs/configuration.md
          - CLI Reference: docs/cli-reference.md
          - Plugin Development: docs/plugin-development.md
          - API Reference: docs/api-reference.md
          - Installation: docs/installation.md
          - Monitoring: docs/monitoring.md
        
        plugins:
          - search
        
        markdown_extensions:
          - admonition
          - codehilite
          - pymdownx.superfences
          - pymdownx.tabbed
          - toc:
              permalink: true
        EOF
    
    - name: Build documentation
      run: |
        mkdocs build --site-dir ./site
        echo "✓ Documentation built successfully"
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: ./site
        retention-days: 30

  # Deploy to GitHub Pages (optional)
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: ./site
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        force_orphan: true
